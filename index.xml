<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>卢肇的博客</title>
    <link>/</link>
    <description>Recent content on 卢肇的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright> [Farewell](https://www.ifarewell.xyz/) All rights reserved.</copyright>
    <lastBuildDate>Tue, 26 Oct 2021 16:00:13 +0800</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Federated Deep Learning with Bayesian Privacy 阅读笔记</title>
        <link>/posts/federated_deep_learning_with_bayesian_privacy/</link>
        <pubDate>Tue, 26 Oct 2021 16:00:13 +0800</pubDate>
        
        <guid>/posts/federated_deep_learning_with_bayesian_privacy/</guid>
        <description>卢肇的博客 /posts/federated_deep_learning_with_bayesian_privacy/ -&lt;p&gt;前段时间&lt;del&gt; 刷讲座课学分 &lt;/del&gt;有幸参加了微众银行（WeBank）的范力欣博士与康焱博士的讲座“联邦学习：目的、方法及应用”，对其中提到的Passport方法感到好奇，因此对相关论文进行了阅读，并在组会上进行了分享。在此对组会上的PPT内容进行整理记录。&lt;/p&gt;
&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;联邦学习是一种在保护数据隐私的前提下，通过各方合作训练深度学习模型来充分发挥各方数据的价值的方法。因其在安全且充分利用各方数据资源方面的作用而受到广泛关注。&lt;/p&gt;
&lt;p&gt;但是，面对包含大量参数的深度学习模型，当前联邦学习中运用的隐私保护方案存在各种问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型准确率低&lt;/li&gt;
&lt;li&gt;隐私保护性不高&lt;/li&gt;
&lt;li&gt;模型收敛速度慢，计算、通信开销大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三个方向的问题，实际上构成了联邦学习中的一组不可能三角，即单一隐私保护方案难以在三方面都有完美表现。&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/Privacy-Efficiency-Utility%20Trilemma.png&#34; alt=&#34;Privacy-Efficiency-Utility Trilemma&#34; title=&#34;Privacy-Efficiency-Utility Trilemma&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;在这种背景下，作者希望寻求一种能够在三方面都有不错表现的隐私保护方案。&lt;/p&gt;
&lt;h1 id=&#34;相关工作&#34;&gt;相关工作&lt;/h1&gt;
&lt;p&gt;本文从三个方面对相关工作进行了总结归纳，包括隐私定义、隐私保护机制与隐私泄露攻击，其中对前两个方面的总结归纳比较到位。&lt;/p&gt;
&lt;h2 id=&#34;隐私定义&#34;&gt;隐私定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$(\epsilon,\delta)-$差分隐私(Differential Privacy):&lt;/p&gt;
&lt;p&gt;$\qquad$一个算法被认为满足$(\epsilon,\delta)-$差分隐私，当且仅当对于两个相距为1的数据集$S,S^\prime$，对于任意的输出集合$E$，应该有&lt;/p&gt;
&lt;p&gt;$$\mathbb{P}(M(S)\in E)\leq e^\epsilon\mathbb{P}(M(S^\prime)\in E)+\delta.$$&lt;/p&gt;
&lt;p&gt;这种隐私性定义方式提出较久，且较为严密，被较为广泛地接受,有较多基于该方式的后续工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;贝叶斯隐私(Baysian Privacy):&lt;/p&gt;
&lt;p&gt;$\qquad$贝叶斯隐私计算攻击者对数据的先验分布与其通过暴露的公开信息恢复出的数据后验分布之间的KL散度(Kullback-Leibler divergence)，分析两分布之间的差异，以衡量隐私数据的泄露程度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;隐私保护机制&#34;&gt;隐私保护机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于随机加噪的保护机制&lt;/p&gt;
&lt;p&gt;$\qquad$通过随机噪声的引入对交换的数据进行扰动，以达到保护隐私数据的目的。运算较为简单，受到较大关注，但不可避免地带来模型训练收敛速度较慢、最终模型准确率不高以及隐私保护能力不强等问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于同态加密的保护机制&lt;/p&gt;
&lt;p&gt;$\qquad$通过算法设计，使得基于密文的计算在解密后的结果与直接基于明文的计算结果相同。能够很好地保证安全性，但计算和通信开销较高。&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/Homomorphic%20Encryption.jpg&#34; alt=&#34;Homomorphic Encryption&#34; title=&#34;Homomorphic Encryption&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于拆分学习的保护机制&lt;/p&gt;
&lt;p&gt;$\qquad$将模型拆分为公有部分和私有部分。中心服务器只对公有模型部分进行参数的聚合与分发，通过对于私有模型的隐藏来保证安全性。但实验表明，进攻者仍然可以通过参与方暴露给中心服务器的数据来推断出私有模型数据。&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/Split%20Learning.png&#34; alt=&#34;Split Learning&#34; title=&#34;Split Learning&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于Passport层的保护机制&lt;/p&gt;
&lt;p&gt;$\qquad$对一个卷积层嵌入passport的方法如图。正常的卷积操作只有左边部分。而嵌入passport后，事先设定的参数$p_γ^l、p_β^l$同样经过卷积层，再经过编码器、解码器池化层之后分别得到参数γ、β用于对正常输出进行伸缩和偏移变换。&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/Passport%20Layer.png&#34; alt=&#34;Passport Layer&#34; title=&#34;Passport Layer&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;$\qquad$该方法实际上不是作为一个隐私保护方案被提出的，而是为了调节模型输出，以达到验证模型所有权及知识产权的目的。根据&lt;a href=&#34;https://proceedings.neurips.cc/paper/2019/file/75455e062929d32a333868084286bb68-Paper.pdf&#34;&gt;前作&lt;/a&gt;的解释，passport层的引入是为了给伸缩参数γ、偏移参数β与网络的权重之间引入相关性，使得当输入非法passport时，模型的结果将产生较大偏差。这里参数$p_γ^l、p_β^l$的作用类似于密码学中的私钥。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;贝叶斯隐私&#34;&gt;贝叶斯隐私&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本文基于贝叶斯隐私框架对隐私保护与攻击两类对抗策略进行了较为深入的形式化分析，这也是本文在写作上比较值得借鉴的地方。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;问题假定&#34;&gt;问题假定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多组织通过横向联邦学习共同进行模型训练DNN模型。&lt;/li&gt;
&lt;li&gt;某些参与方（或中央服务器）是半诚实的，即不会提交错误数据或恶意执行错误计算，但可能利用联邦学习过程中交换的信息对其他参与方进行隐私攻击。&lt;/li&gt;
&lt;li&gt;单个参与方拥有隐私数据 $x$，并会暴露公共数据 $G$，此处 $G$ 与 $x$ 相关，满足映射 $G=g(x)$。需要注意的是，在联邦学习中，映射 $g()$ 被所有参与方知晓，因为其训练的模型结构是相同的。但隐私数据 $x$ 仅被参与方自身了解。&lt;/li&gt;
&lt;li&gt;分类任务中 G的计算通过最小化损失函数来完成。&lt;/li&gt;
&lt;li&gt;半诚实参与方会试图通过最小化 $|g(\widetilde x)-G|$，以达到用 $\widetilde x$ 来估计 $x$ 的目的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上述问题假定下，存在两方相互对抗的机制。即隐私数据保护机制 $M$ 与隐私攻击机制 $A$。&lt;/p&gt;
&lt;h2 id=&#34;联邦学习中的隐私保护机制&#34;&gt;联邦学习中的隐私保护机制&lt;/h2&gt;
&lt;p&gt;本文将该情境下隐私保护机制定义为映射&lt;/p&gt;
&lt;p&gt;$$\widetilde{G}=M(G),$$&lt;/p&gt;
&lt;p&gt;将参与方暴露的公共信息 $G$ 作为输入，输出一个修改过的公共信息 $G$。具体修改方式与隐私保护机制相关：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于随机噪声的保护机制:
$$\widetilde{G}=Rand_\epsilon(G)=G+\epsilon$$&lt;/li&gt;
&lt;li&gt;基于引入稀疏性的保护机制：
$$\widetilde{G}=Spar_{s,t}(G)$$&lt;/li&gt;
&lt;li&gt;基于调整的保护机制：
&lt;div&gt;$$\widetilde{G}=Mod_P(G)=\mathop{\arg\min}_{G}(L_{CE}(G,x)+L_P(G,P))$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;基于同态加密的保护机制：
$$\widetilde{G}=Enc(G)$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得注意的是，这些隐私保护机制可以进行组合，以提供更高的隐私保护能力。本文中的方法就是对基于引入稀疏性的split learning和基于调整的passport layer方法进行有机结合，最终达到较为满意的效果。&lt;/p&gt;
&lt;h2 id=&#34;联邦学习中的隐私攻击机制&#34;&gt;联邦学习中的隐私攻击机制&lt;/h2&gt;
&lt;p&gt;本文将该情境下隐私保护机制定义为映射
$$\widetilde{x}^*=A(\widetilde{G}):=\mathop{\arg\min}_{\widetilde{x}}L(g(\widetilde{x}),\widetilde{G}),$$
而基于贝叶斯框架，攻击者根据公开信息来还原数据可表示为
$$P(\widetilde{x}|\widetilde{G})=\frac{P(\widetilde{G}|\widetilde{x})P(\widetilde{x})}{P(\widetilde{G})}\propto P(\widetilde{G}|\widetilde{x})P(\widetilde{x}),$$
因此，攻击者获得最优恢复数据的过程可表达为&lt;/p&gt;
&lt;div&gt;
$$
\begin{aligned}
\widetilde{x}^*
&amp;=A(\widetilde{G})=\mathop{\arg\max}_{\widetilde{x}}log(P(\widetilde{x}|\widetilde{G}))\\\\
&amp;=\mathop{\arg\min}_{\widetilde{x}}[-log(P(\widetilde{G}|\widetilde{x}))-log(P(\widetilde{x}))]\\\\
&amp;\triangleq\mathop{\arg\min}_{\widetilde{x}}[L_1(g(\widetilde{x}),\widetilde{G})+L_2(\widetilde{x})],
\end{aligned}
$$
&lt;/div&gt;
&lt;p&gt;其中，$L_2=-log(P(\widetilde{x}))$ 是在为引入引入先验，例如图像的平滑性带来的先验。而 $L_1=-log(P(\widetilde{G}|\widetilde{x}))$ 则又是根据不同的攻击方式具有不同的具体形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模型逆向攻击：&lt;/p&gt;
&lt;div&gt;$$L_1(g(\widetilde{x}),\widetilde{G})=||\widetilde{O}-O||^2.$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于梯度的攻击：&lt;/p&gt;
&lt;div&gt;$$L_1(g(\widetilde{x}),\widetilde{G})=||\nabla W(\widetilde{O})-\nabla W(O)||^2.$$&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从攻击者角度，私有数据的重建实际上是对于私有数据知识的增加。&lt;/p&gt;
&lt;h2 id=&#34;带有对抗过程的贝叶斯隐私框架&#34;&gt;带有对抗过程的贝叶斯隐私框架&lt;/h2&gt;
&lt;p&gt;给定隐私保护机制 $M$，隐私泄露攻击 $A$，攻击者对于私有数据 $x$ 的先验分布 $F_0$，本文将贝叶斯隐私定义为&lt;/p&gt;
&lt;div&gt;$$BP(M,A,g,F_0)=KL(F_0||F_A(\widetilde{x}|M(g(X))))$$&lt;/div&gt;
&lt;p&gt;同时，针对攻击者对隐私数据的先验$F_0$的质量，作者进行了分类讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;攻击者对私有数据几乎没有先验知识，先验接近均匀分布，即$F_0=\bar F$，此时攻击者希望复原的数据能够更贴近真实数据而非随机猜测，因此想要更高的KL散度以获得更高的知识增量；而防御者希望KL散度越低越好，以保证隐私数据的信息不被过多泄露。因此，双方之间的对抗体现为&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;$$\mathop{max}_{A}\mathop{min}_{M}BP(M,A,g,\bar{F}).$$&lt;/div&gt;  
&lt;ul&gt;
&lt;li&gt;攻击者已经大致了解私有数据的分布情况，先验分布约等于真实分布，即$F_0\approx F^*$。此时，攻击者希望复原的数据尽量服从该分布，因此想要尽量减小KL散度；而防御者则希望增大KL散度来误导攻击者。因此，双方之间的对抗体现为&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;$$\mathop{min}_{A}\mathop{max}_{M}BP(M,A,g,F^*).$$&lt;/div&gt;
&lt;p&gt;需要注意的是，此处的攻击与防御措施分别由攻击者与防御者双方来进行，提出的Bayesian privacy框架仅仅是为了更好对两个过程进行综合分析。&lt;/p&gt;
&lt;h1 id=&#34;基于私有passport的联邦学习&#34;&gt;基于私有Passport的联邦学习&lt;/h1&gt;
&lt;p&gt;作者综合前述分析，结合了拆分学习与Passport层，提出了基于私有Passport的联邦学习，具体架构如下。&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/Federated%20Deep%20Learning%20with%20Private%20Passport.png&#34; alt=&#34;Federated Deep Learning with Private Passport&#34; title=&#34;Federated Deep Learning with Private Passport
&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;该框架实际上是对split learning和passport layer的结合。
每个client的本地模型分为public和private两部分，只有public部分的模型会参与中心服务器的聚合与分发（如图片左半边所示）。Private模型仅在本地更新。而在private部分的模型中，又嵌入passport层，以进一步保护本地隐私数据的安全性（如图片右半边所示）。&lt;/p&gt;
&lt;p&gt;个人理解Passport层的作用是为不同参与方的模型输入分布进行扰动，使得不同参与方所训练的模型存在差异性，因而难以被恶意参与方攻击。&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/FDL-PP%20algorithm.png&#34; alt=&#34;Federated&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
整体框架的伪代码如图，看起来很长，实际上比较易于理解。分为三个部分：
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;训练主体部分1-9，中央服务器分发public模型参数，各客户端获取参数，分别进行本地训练，对public模型权重进行更新并回传给服务器，服务器随后对模型权重进行聚合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;client本地训练部分10-16，客户端正常训练，获得loss信息，对public部分进行权重更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client本地私有训练部分17-23，冻结public模型的参数，仅根据本地计算的loss对private模型参数进行更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;理论分析&#34;&gt;理论分析&lt;/h1&gt;
&lt;p&gt;理论证明过程较为冗长，主要通过证明两个关键命题来表明上述两个方法结合的必要性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在拆分学习中，即便private部分的模型没有被暴露，攻击者依然能够较为容易地复原隐私数据&lt;/strong&gt;。命题最终给出了贝叶斯隐私的上界：
$$
\begin{aligned}
\sqrt{BP_{MSE}(x,\widetilde{x})}
&amp;amp;=||\widetilde{x}-x||_2\\&lt;br&gt;
&amp;amp;=||W^+\cdot O_1-\widetilde{W}^+\cdot O_2||_2\\&lt;br&gt;
&amp;amp;\leq C_1||\widetilde{W}^+||2||W^+||_2||W-\widetilde{W}||_2
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由该上界表达式可见，在攻击者与隐私数据拥有者之间的获得的权重十分接近的前提下，攻击者能够有效重建隐私数据。&lt;strong&gt;作者对此提出一个假定：在没有passport层的情况下，不同参与方之间的private模型通常会学到较为相近的权重。&lt;/strong&gt; 在该假定为真的情况下，我们根据前述上界知道，攻击者确实能够较为容易地复原隐私数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;嵌入passport层能够有效防止隐私数据被复原&lt;/strong&gt;。命题最终给出了贝叶斯隐私的下界：
$$
\begin{aligned}
BP_{MSE}(x,\widetilde{x})
&amp;amp;=||\widetilde{x}-x||_2\\&lt;br&gt;
&amp;amp;=||W^+\cdot O_1-\widetilde{W}^+\cdot O_2||_2\\&lt;br&gt;
&amp;amp;\geq \frac{1}{||\widetilde{W}-W||_2}\\&lt;br&gt;
&amp;amp;\geq \frac{1}{||\widetilde{W}||_2+||W||_2}\\&lt;br&gt;
&amp;amp;=\frac{1}{||\widetilde{D}_\gamma\cdot\widetilde{w}||_2+||D_\gamma\cdot w||_2}\\&lt;br&gt;
&amp;amp;\geq \frac{1}{||\widetilde{D}_\gamma||_2||\widetilde{w}||_2+||D_\gamma||_2||w||_2}\\&lt;br&gt;
&amp;amp;\geq \frac{C_2}{||D_\gamma||_2+||\widetilde{D}_\gamma||_2}
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;作者对该命题又提出两个假定：嵌入passport会使得该下界的分母减小，且会使得模型整体的秩降低。&lt;/strong&gt; 若这两个假定均为真，则passport层的确可以提高贝叶斯隐私的下界，即提高了整体的隐私保护能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在上述两个关键命题的证明过程中，作者利用了三个难以通过理论论证直接证明的假定，在之后的工作中，通过专门设计的实验来对这三个假定进行实践的检验。这种方法在日后的论文写作过程中也十分值得借鉴。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;实验&#34;&gt;实验&lt;/h1&gt;
&lt;p&gt;本文中，作者通过实验比较了所提出方法与各传统方法的效果，验证了所提出方法的优越性。&lt;/p&gt;
&lt;h2 id=&#34;实验条件&#34;&gt;实验条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实验数据集：MNIST, CIFAR10， CIFAR100&lt;/li&gt;
&lt;li&gt;实验网络：Lenet，Alexnet，Resnet-18&lt;/li&gt;
&lt;li&gt;对照算法：不加隐私保护的分布式学习(DL)、带差分隐私的联邦学习(DLDP-A、DLDP-B)、拆分学习(SplitFed)。&lt;/li&gt;
&lt;li&gt;FDL-PP设定：第一个卷积层和激活函数设为private，后续层数设为public。在private层之后嵌入passport层。&lt;/li&gt;
&lt;li&gt;攻击算法：基于梯度的攻击、模型逆向攻击。&lt;/li&gt;
&lt;li&gt;评价标准：
&lt;ul&gt;
&lt;li&gt;模型效果：准确率&lt;/li&gt;
&lt;li&gt;训练复杂性：训练时间&lt;/li&gt;
&lt;li&gt;隐私保护能力：基于前述贝叶斯隐框架的隐私评估&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：此处DLDP-A、DLDP-B分别对应$\sigma=0.002$与$\sigma=0.128$的高斯噪声。且在实验中，基于贝叶斯隐私框架的评估被退化为基于MSE loss的评估体系。&lt;/p&gt;
&lt;h2 id=&#34;实验结果&#34;&gt;实验结果&lt;/h2&gt;
&lt;p&gt;作者首先展示了对于两张图片的攻击结果。其中，对于同一张图片，上面一行为基于梯度攻击的结果，下一行为模型逆向攻击的结果。除了直观感受复原前后的图片差距，图片下方还给出了攻击得到的图片与原图片的 MSE loss，便于从数值上体会具体差异大小。&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/result1.png&#34; alt=&#34;result1&#34; title=&#34;result1&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
从图中可以看到，本文提出的FDL-PP方法的隐私保护效果无疑是极好的。此外，作者还强调了差分隐私理论给出的隐私条件过于松散。图中可以看出，DLDP-A几乎难以起到保护作用，且数值上也体现出其保护性能的低下（而根据差分隐私的理论，加上$\sigma=0.002$的高斯噪声后，应该能够达到 $(15.8,10^{-5})$ 的保护效果）。
&lt;p&gt;作者接着在下图中给出了各种方式在前述三个数据集以及两种攻击方式下的表现对比。图中横坐标是最终模型的准确率，纵坐标是隐私保护能力。&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/result2.png&#34; alt=&#34;result2&#34; title=&#34;result2&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;我们能很直观地感受到，FDL-PP方法在模型准确率与隐私保护性能两方面均占上风。&lt;/p&gt;
&lt;p&gt;作者还给出了各种隐私保护方式在各条件下的详细数据表格，如下所示。&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/result3.png&#34; alt=&#34;result3&#34; title=&#34;result3&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;可以发现，相对于除同态加密之外的算法，FDL-PP的训练速度并没有优势，但也在可用的范围内。而基于同态加密的算法其所需训练复杂度有些难以接受。&lt;/p&gt;
&lt;p&gt;综合上述实验结果，我们可以得出结论，在可用的训练复杂度范围内，FDL-PP方法在模型准确率与隐私保护性能上相对其他方式有明显优势，因此，确实是一种有效的改进方法。&lt;/p&gt;
&lt;h2 id=&#34;实验性验证&#34;&gt;实验性验证&lt;/h2&gt;
&lt;p&gt;还记得在理论分析部分中，作者用到了三个假定来支持其结论，而这三个假定难以通过理论分析进行论证。因此，作者为三个假定分别设计了验证性的实验，结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假定一：没有passport层时，不同参与方之间的private模型通常会学习到较为相近的权重。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/assumption1.png&#34; alt=&#34;assumption1&#34; title=&#34;assumption1&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;假定二：嵌入passport会使得scaling factor减小。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/assumption2.png&#34; alt=&#34;assumption2&#34; title=&#34;assumption2&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;假定三：嵌入passport会使得参数的秩降低。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;/images/assumption3.png&#34; alt=&#34;assumption3&#34; title=&#34;assumption3&#34;&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;本文主要算法FDL-PP是对split learning与前作中提出的passport方法的结合，方法上并不是从0到1的创新，但实际效果确实较为优秀。&lt;/p&gt;
&lt;p&gt;本文对于隐私保护能力的评估体系Bayesian Privacy看似复杂、高大上，但只停留在理论阶段，到最后经过层层简化，也不过是对还原出的图像与原图计算一个MSE loss，说明成熟且实用的隐私保护能力评估体系设计确实有难度。因此差分隐私体系受到追捧也不是没有道理的，其自成体系的逻辑可以为相关的分析带来许多便利，并且能够使得理论为大家所接受。&lt;/p&gt;
&lt;p&gt;文章对于隐私保护方式、攻击方式以及隐私保护评估体系的形式化做得较好，值得学习借鉴。&lt;/p&gt;
&lt;p&gt;文章的理论推导过程中用到一些经验性的结论难以通过推导直接得出，因此转而对这些结论进行实验性的检验与说明，这样的做法也很值得借鉴。&lt;/p&gt;
&lt;p&gt;总的来说，无论是从研究上还是写作上，本文都是一篇很有价值的文章，值得学习借鉴。在组会上进行分享时，本文也引起了老师与同学的广泛讨论，促进了实验室成员相互之间的深度交流。这也是本人在组会上分享文章时第一次获得大家如此热烈的反响，体验极佳🥰🥰，也让本人深刻体会到阅读与分享好文章所带来的收获感与成就感。&lt;/p&gt;
- /posts/federated_deep_learning_with_bayesian_privacy/ -  [Farewell](https://www.ifarewell.xyz/) All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>博客维护方式</title>
        <link>/posts/maintain/</link>
        <pubDate>Thu, 01 Jul 2021 20:49:46 +0800</pubDate>
        
        <guid>/posts/maintain/</guid>
        <description>卢肇的博客 /posts/maintain/ -&lt;p&gt;&lt;del&gt; 鉴于本人三天打鱼两天晒网的习性，下次更新博客已不知是猴年马月 &lt;/del&gt;，特在此记录本博客的维护方式，以便于日后的维护工作。&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;本博客同时发布于本人的&lt;a href=&#34;https://ifarewell.github.io&#34;&gt; Github Page &lt;/a&gt;与&lt;a href=&#34;http://81.68.255.144&#34;&gt; 个人服务器 &lt;/a&gt;上，分别通过&lt;a href=&#34;https://github.com/ifarewell/ifarewell.github.io&#34;&gt; ifarewell.github.io &lt;/a&gt;的master与server分支进行维护。实际上，该任务可通过将其中一方重定向至另一方完成。但为了练习 Git 中的分支管理相关功能，我决定以此稍显复杂的方式进行。&lt;/p&gt;
&lt;p&gt;本博客采用&lt;a href=&#34;https://gohugo.io/&#34;&gt; Hugo &lt;/a&gt; 与其中的&lt;a href=&#34;https://themes.gohugo.io/anatole/&#34;&gt; Anatole &lt;/a&gt;主题进行构建。前述两个 Git 分支的区别主要在于，使用 hugo 进行页面生成时，配置文件 &lt;code&gt;config.toml&lt;/code&gt; 中 &lt;code&gt;baseURL&lt;/code&gt; 需设定为博客地址，这将使得所生成页面文件夹 &lt;code&gt;public&lt;/code&gt; 中多个文件的内容存在差异。&lt;/p&gt;
&lt;h2 id=&#34;文章创建&#34;&gt;文章创建&lt;/h2&gt;
&lt;p&gt;在博客项目的根目录下，使用 hugo 创建新文章。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hugo new content/zh-cn/post/filename.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用该指令，hugo 将会依据根目录下 &lt;code&gt;archetypes/default.md&lt;/code&gt; 生成新文章模板，其中包括标题、发布时间、文章描述、文章标签等信息。&lt;/p&gt;
&lt;h2 id=&#34;效果测试&#34;&gt;效果测试&lt;/h2&gt;
&lt;p&gt;文章创建完毕后，在项目根目录中使用 hugo server 进行页面效果测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过该指令，可以在 &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; 中查看网页效果，并且可以将本地文章的修改实时渲染出来。&lt;/p&gt;
&lt;h2 id=&#34;页面生成&#34;&gt;页面生成&lt;/h2&gt;
&lt;p&gt;在文章编写完毕之后，在博客项目根目录下，使用 hugo 生成页面至 &lt;code&gt;public&lt;/code&gt; 文件夹中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hugo --config configFilename1.toml, configFilename2.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该指令会在根目录下寻找给定的配置文件并依据这些文件进行页面生成。在不显式给定配置文件时，hugo 默认依据配置文件 &lt;code&gt;config.toml&lt;/code&gt; 或配置文件夹 &lt;code&gt;config/_default&lt;/code&gt; 下所有配置文件来进行页面生成（依据调试经验，前者优先级似乎高于后者）。&lt;/p&gt;
&lt;p&gt;值得注意的是，本地调试过程中，配置文件 &lt;code&gt;config.toml&lt;/code&gt; 中 &lt;code&gt;baseURL&lt;/code&gt; 的设定对结果似乎无影响。但在部署至 Github Page 或个人服务器上之前， 需要将其设定为实际页面的地址再进行生成。&lt;/p&gt;
&lt;h2 id=&#34;页面部署&#34;&gt;页面部署&lt;/h2&gt;
&lt;p&gt;页面生成后，进入 &lt;code&gt;public&lt;/code&gt; 文件夹，使用 Git 将该文件夹同步至 Github 上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 首次提交前需要进行文件夹初始化&lt;/span&gt;
git init

&lt;span style=&#34;color:#228b22&#34;&gt;# 为 Git 本地库添加远程库&lt;/span&gt;
git remote add origin git@github.com:ifarewell/ifarewell.github.io.git

&lt;span style=&#34;color:#228b22&#34;&gt;# 查看当前版本状态&lt;/span&gt;
git status

&lt;span style=&#34;color:#228b22&#34;&gt;# 添加所有修改过的文件&lt;/span&gt;
git add . 

&lt;span style=&#34;color:#228b22&#34;&gt;# 将修改提交至本地库，可选择附上提交信息&lt;/span&gt;
git commit -m &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;commit message&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;# 将修改同步至远程库&lt;/span&gt;
git push -u origin master/server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;个人服务器部署&#34;&gt;个人服务器部署&lt;/h2&gt;
&lt;p&gt;经过前述过程，新生成的页面已提交至Github 上，通过&lt;a href=&#34;https://ifarewell.github.io&#34;&gt; Github Page &lt;/a&gt;已经可以成功访问更新后的页面。但个人服务器还需要多一步，即将 server 分支拉取至服务器上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git pull origin server:master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此处master是服务器本地的分支名称，需要注意与远端的master分支相区别。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;至此，一篇新文章成功被创建——编写——部署至本人的&lt;a href=&#34;https://ifarewell.github.io&#34;&gt; Github Page &lt;/a&gt;与&lt;a href=&#34;http://81.68.255.144&#34;&gt; 个人服务器 &lt;/a&gt;上。希望这篇文章对想要基于 hugo 进行个人博客编写的读者有所帮助，也希望本人能够勤快、熟练地更博，尽量少参考这篇备用博文🤪🤪。&lt;/p&gt;
- /posts/maintain/ -  [Farewell](https://www.ifarewell.xyz/) All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Hello World!</title>
        <link>/posts/first/</link>
        <pubDate>Wed, 30 Jun 2021 13:16:28 +0800</pubDate>
        
        <guid>/posts/first/</guid>
        <description>卢肇的博客 /posts/first/ -&lt;p&gt;从头开始维护个人博客的想法一直在脑海中持续了很久。一方面，通过整个搭建维护流程，可以些许弥补本人计网知识水平和工程经验的欠缺，另一方面，也是希望在社交媒体之外有一个记录个人技术经历与生活碎碎念的场所。但由于个人学业任务、缺乏启动契机&lt;del&gt; 以及游戏太好玩 &lt;/del&gt;等因素，一直未能将该想法付诸实现😜😜。&lt;/p&gt;
&lt;p&gt;适逢618云服务器大促、本科学业结束、小学期留校搬砖等一系列情况，于是本人决定择日不如撞日，就此开始维护个人博客，希望能坚持下去吧🤣🤣。&lt;/p&gt;
- /posts/first/ -  [Farewell](https://www.ifarewell.xyz/) All rights reserved.</description>
        </item>
    
    
    
    
  </channel>
</rss> 